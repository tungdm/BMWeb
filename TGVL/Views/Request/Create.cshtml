@model TGVL.Models.CreateRequestViewModel

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_HomePageViewLayout.cshtml";
}

@Styles.Render("~/Content/searchproductcss")
@Styles.Render("~/bundles/SummernoteCSS")
@Scripts.Render("~/bundles/SummernoteJS")
<style>
    #border_layout {
        float: left;
        text-align: left;
        width: 100%;
        background: #FFFFFF;
        border: 1px solid #e5e5e5;
    }

    #dep {
        background: #eaeaea;
        border-bottom: 1px solid #e5e5e5;
        font-family: 'Roboto';
        padding: 6px 5px 6px 5px;
    }
</style>

<section class="main-container">
    <div class="main container">
        <fieldset>
            @using (Ajax.BeginForm(
                    new AjaxOptions
                    {
                        HttpMethod = "POST",
                        InsertionMode = InsertionMode.Replace,
                        UpdateTargetId = "",
                        OnSuccess = "checkValidate(data, status, xhr)"
                    }
                ))
            {
                @*@using (Html.BeginForm())
                    {*@
                @Html.AntiForgeryToken()

                <div class="col-md-12">
                    <div class="form-horizontal">

                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.Flag)

                        <div class="popular-posts widget widget__sidebar" id="recent-posts-4">
                            <div>
                                <h2 class="widget-title"><strong>SẢN PHẨM YÊU CẦU</strong></h2>
                                <br />

                                <div id="mydiv" class="form-group" style="display:none">
                                    <div style="visibility: hidden">
                                        <input name="sum" id="total" value="0" />
                                        <div id="min"></div>
                                    </div>
                                    <div class="col-md-offset-1 col-md-10" id="productList"></div>
                                    <div style="text-align:center" tabindex="1" class="text-danger col-md-offset-1 col-md-10" id="errorTotal"></div>
                                </div>
                                <div class="form-group">
                                    <div style="text-align:center">
                                        <button type="button" class="btn btn-info" data-toggle="modal" data-target="#searchProduct">Thêm sản phẩm</button>
                                    </div>
                                </div>

                            </div>
                            <h3 class="widget-title"><strong>YÊU CẦU</strong></h3>
                            <div class="widget-content">
                                <div class="form-group">
                                    <label class="control-label col-md-3 col-xs-12">Tiêu đề<span style="color:#ff0000"> *</span></label>
                                    <div class="col-md-9 col-xs-12">
                                        @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control MaxLengthInputTextSmall", @style="float:left" } })
                                        @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @*@Html.LabelFor(model => model.TypeOfHouse, htmlAttributes: new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })*@
                                    <label class="control-label col-md-3 col-xs-12">Loại nhà<span style="color:#ff0000"> *</span></label>
                                    <div class="col-md-9 col-xs-12">
                                        @Html.DropDownListFor(
                                        model => model.TypeOfHouse,
                                        new SelectList(Model.AllTypeOfHouses, "Id", "Type"),
                                        "-----[Chọn loại nhà]-----",
                                        htmlAttributes: new { @class = "form-control", @style = "float:left" }
                                    )
                                        @Html.ValidationMessageFor(model => model.TypeOfHouse, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @*@Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })*@
                                    <label class="control-label col-md-3 col-xs-12">Địa chỉ nhận hàng<span style="color:#ff0000"> *</span></label>
                                    <div class="col-md-9 col-xs-12" style="margin-top: 6px;">
                                        @Html.EditorFor(model => model.ReceivingAddress, new { htmlAttributes = new { @class = "form-control MaxLengthInputTextSmall", @style = "float:left" } })
                                        @Html.ValidationMessageFor(model => model.ReceivingAddress, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @*@Html.LabelFor(model => model.ReceivingDate, htmlAttributes: new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })*@
                                    <label class="control-label col-md-3 col-xs-12">Ngày nhận hàng<span style="color:#ff0000"> *</span></label>
                                    <div class="col-md-9 col-xs-12">
                                        @Html.EditorFor(model => model.ReceivingDate, new { htmlAttributes = new { @class = "form-control", @style = "float:left" } })
                                        @Html.ValidationMessageFor(model => model.ReceivingDate, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @*@Html.LabelFor(model => model.TimeRange, htmlAttributes: new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })*@
                                    <label class="control-label col-md-3 col-xs-12">Thời hạn yêu cầu (ngày)<span style="color:#ff0000"> *</span></label>
                                    <div class="col-md-9 col-xs-12">
                                        @Html.EditorFor(model => model.TimeRange, new { htmlAttributes = new { @class = "form-control", onfocus = "if(this.value=='0') this.value=''", @style = "float:left" } })
                                        @Html.ValidationMessageFor(model => model.TimeRange, "", new { @class = "text-danger" })
                                    </div>
                                </div>
             
                                <div class="form-group">
                                    @*@Html.LabelFor(model => model.PaymentType, htmlAttributes: new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })*@
                                    <label class="control-label col-md-3 col-xs-12">Hình thức thanh toán<span style="color:#ff0000"> *</span></label>
                                    <div class="col-md-9 col-xs-12">
                                        @Html.DropDownListFor(
                                        model => model.PaymentType,
                                        new SelectList(Model.AllTypeOfPayments, "Id", "Type"),
                                        "-----[Chọn hình thức thanh toán]-----",
                                        htmlAttributes: new { @class = "form-control", @style = "float:left" }
                                    )
                                        @Html.ValidationMessageFor(model => model.PaymentType, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                

                                <div class="form-group">
                                    <label class="control-label col-md-3 col-xs-12">Miêu tả chi tiết</label>
                                    <div class="col-md-9">
                                        @Html.TextAreaFor(model => model.Description, new { @class = "form-control", @rows = 5 })
                                    </div>
                                </div>
                            </div>
                            <br />

                            <div>
                                <h2 class="widget-title"><strong>THÔNG TIN LIÊN HỆ</strong></h2>
                                <br />
                                <div class="form-group">
                                    @*@Html.LabelFor(model => model.CustomerName, htmlAttributes: new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })*@
                                    <label class="control-label col-md-3 col-sm-3 col-xs-12">Tên người đăng</label>
                                    <div class="col-md-6 col-sm-6 col-xs-12" style="margin-top: 6px;">
                                        @Html.DisplayFor(model => model.CustomerName, new { htmlAttributes = new { @class = "form-control" } })
                                       
                                    </div>
                                </div>

                                <div class="form-group">
                                    @*@Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })*@
                                    <label class="control-label col-md-3 col-sm-3 col-xs-12">Email</label>
                                    <div class="col-md-6 col-sm-6 col-xs-12" style="margin-top: 6px;">
                                        @Html.DisplayFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                                        
                                    </div>
                                </div>

                                <div class="form-group">
                                    @*@Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })*@
                                    <label class="control-label col-md-3 col-sm-3 col-xs-12">Điện thoại</label>
                                    <div class="col-md-6 col-sm-6 col-xs-12" style="margin-top: 6px;">
                                        @Html.DisplayFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control" } })
                                        
                                    </div>
                                </div>

                                <div class="form-group">
                                    @*@Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })*@
                                    <label class="control-label col-md-3 col-sm-3 col-xs-12">Địa chỉ</label>
                                    <div class="col-md-6 col-sm-6 col-xs-12" style="margin-top: 6px;">
                                        @Html.DisplayFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                                  
                                    </div>
                                </div>
                                <hr />
                                <div class="form-group">
                                    <div style="text-align:center">
                                        @*<p><button class="btn btn-success sweet-3" onclick="_gaq.push(['_trackEvent', 'example', 'try', 'sweet-3']);">Hoàn tất</button></p>*@
                                        <p><button class="btn btn-success" type="submit" id="hoantat">Hoàn tất</button></p>
                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>

            }

        </fieldset>
    </div>
</section>

<div id="modalProduct"></div>


<div id="searchProduct" class="modal fade" role="dialog">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Thêm sản phẩm</h4>
            </div>
            <div class="modal-body" style="min-height:calc(100vh - 210px);max-height: calc(100vh - 210px);overflow-y: auto;">
                <div class="form-horizontal">
                    @*Tìm kiếm sản phẩm*@
                    @using (Ajax.BeginForm(
new AjaxOptions
{
    HttpMethod = "GET",
    InsertionMode = InsertionMode.Replace,
    UpdateTargetId = "listProduct",
    OnSuccess = "$('#select').show()"
}
))
                    {
                        <p style="text-align:center">
                            @Html.TextBox("searchString", null, new { @class = "form-control text-box", style = "display:inline-block", placeholder = "Nhập vào đây để tìm kiếm" })
                            <input type="submit" value="Tìm kiếm" class="btn btn-primary" />
                        </p>

                        <div id="clone" style="display:none"></div>
                    }

                </div>

                <div id="result">
                    @using (Ajax.BeginForm("SelectProduct", "Request",
new AjaxOptions
{
    HttpMethod = "GET",
    InsertionMode = InsertionMode.Replace,
    UpdateTargetId = "productList",
    OnSuccess = "selectedSuccess(data)"
}, new { @id = "formAjax" }
))
                    {
                        <div id="listProduct"></div>
                    }
                </div>


            </div>
            <div class="modal-footer">
                <input id="select" type="button" value="Xác nhận" class="btn btn-warning" style="display:none" />

                <button type="button" class="btn btn-default" data-dismiss="modal" id="deleteSearchForm">Hủy</button>
            </div>
        </div>

    </div>
</div>

@*@Scripts.Render("~/bundles/pricejquery")*@
@section Scripts {
    @*@Scripts.Render("~/bundles/jqueryval")*@
    @Scripts.Render("~/bundles/textareasjquery")
    <script>
        $(document).ready(function () {
            var MaxLengthInputTextSmall = @Model.MaxLengthInputTextSmall;
            var MaxLengthInputNumberSmall = @Model.MaxLengthInputNumberSmall;
            var MinNumSeletedProduct = @Model.MinNumSeletedProduct;

            $('input').bind("cut copy paste", function(e) {
                e.preventDefault();
            });

            $("#TimeRange").rules("add", {
                range: [@Model.MinTimeRange, @Model.MaxTimeRange],
                messages: {
                    range: "Thời hạn yêu cầu phải từ @Model.MinTimeRange đến @Model.MaxTimeRange ngày"
                }
            });

            $('.MaxLengthInputTextSmall').keypress(function (e) {
                if (this.value.length == MaxLengthInputTextSmall) {
                    e.preventDefault();
                }
            });

            $('#hoantat').click(function () {
                update_amounts();
                var numOfSelectedProduct = $("#my-orders-table > tbody > tr").length;
                console.log("numOfSelectedProduct=" + numOfSelectedProduct);
                if (numOfSelectedProduct < MinNumSeletedProduct) {
                    $('#mydiv').show();
                    message = "<span id='error' class='text-danger field-validation-error'><span>Hãy chọn ít nhất " + MinNumSeletedProduct + " sản phẩm</span></span>";
                    console.log(message);
                    $("#errorTotal").html(message);
                    $('#error').focus();
                }
                //var sum = $("#total").val();
                //console.log(sum);
            });

            $('input[type="number"]').bind('keypress', function (e) {
                if (e.keyCode == '9' || e.keyCode == '16') {
                    return;
                }
                var code;
                if (e.keyCode) code = e.keyCode;
                else if (e.which) code = e.which;
                if (e.which == 46)
                    return false;
                if (code == 8 || code == 46)
                    return true;
                if (code < 48 || code > 57)
                    return false;
            });

            var MinDateDeliveryRange = @Model.MinDateDeliveryRange;
            var now = moment().format('YYYY-MM-DD');
            var minDate = moment(now).add(MinDateDeliveryRange, 'days').format('YYYY-MM-DD');

            $.validator.addMethod("daterange", function (value, element) {
                var receivingDate = $("#ReceivingDate").val();




                console.log("now:" + now + ", receivingDate:" + receivingDate + ", minDate:" +minDate);

                return receivingDate >= minDate;

                //return someDate >= today;
            }, "Ngày nhận hàng phải từ ngày " + moment(minDate).format('DD/MM/YYYY') + " về sau");

            $('input[name="ReceivingDate"]').rules("add", {
                daterange: true
            });

            function update_amounts() {
                var sum = 0.0;
                var min = @Model.MinBidPrice;  //set config

                $('#my-orders-table > tbody  > tr').each(function () {
                    var qty = $(this).find('.qty').val();

                    var price = $(this).find('.price').text();

                    var price2 = Number(price.replace(/[^0-9]+/g, ""));

                    console.log("qty:" + qty + ", price:" + price + ", price2:" + price2);

                    var amount = (qty * price2)
                    sum += amount;
                });
                console.log(sum);

                if (min != 0 && $('#Flag').val() == "bid") {
                    if (sum >= min) {
                        $('#errorTotal').empty();
                    } else {
                        var message = "Total > " + addDot(min) + " &#x20AB;)";
                        var message = "Giá thầu phải lớn hơn " + addDot(min) + " &#x20AB; (Giá hiện tại: " + addDot(sum) + " &#x20AB;)"
                        console.log(message);
                        $('#errorTotal').html(message);
                    }
                }

                $('#total').val(sum);
            }
        });

        $("#Description").summernote({
            height: 300, // set editor height
            width: 700,
            minHeight: null, // set minimum height of editor
            maxHeight: null, // set maximum height of editor
            focus: false, // set focus to editable area after initializing summernote
            lang: "vi-VN"
        });



        //$('#pricesell').priceFormat({
        //    prefix: '',
        //    centsSeparator: ',',
        //    thousandsSeparator: ',',
        //    centsLimit: 0,
        //    suffix: ''
        //});
    </script>
}


