@model TGVL.Models.CreateRequestViewModel
@using TGVL.MyHelper
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_HomePageViewLayout.cshtml";
    ViewData["UnSeenNoti"] = Model.NumOfUnseen;
}
@Styles.Render("~/Content/searchproductcss")
@Styles.Render("~/bundles/SummernoteCSS")
@Scripts.Render("~/bundles/SummernoteJS")
<style>
    #border_layout {
        float: left;
        text-align: left;
        width: 100%;
        background: #FFFFFF;
        border: 1px solid #e5e5e5;
    }

    #dep {
        background: #eaeaea;
        border-bottom: 1px solid #e5e5e5;
        font-family: 'Roboto';
        padding: 6px 5px 6px 5px;
    }
    #imgPreview {
        max-height:100px; 
        max-width:100px;
        margin-top: 10px;
        display: block;
    }
    #ImageUrl {
        margin-top: 5px;
        width: 380px;
        float:left;
    }
    .widget-content {
        padding: 15px 0;
        padding-left: 10px;
        /* padding-right: 5px; */
        margin-left: 10px;
        border-top: none;
        font-size: 17px;
    }
</style>

<section class="main-container">
    <div class="main container">
        <fieldset>
            @using (Ajax.BeginForm("Create","Request", null,
                    new AjaxOptions
                    {
                        HttpMethod = "POST",
                        InsertionMode = InsertionMode.Replace,
                        UpdateTargetId = "",
                        OnSuccess = "checkValidate(data, status, xhr)"
                    }, new { enctype = "multipart/form-data" }
                ))
            {

                @Html.AntiForgeryToken()

                <div class="col-md-12">
                    <div class="form-horizontal">

                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.Flag)

                        <div class="popular-posts widget widget__sidebar" id="recent-posts-4" style="background:#fff">
                            <div>
                                <h2 class="widget-title" ><strong>SẢN PHẨM YÊU CẦU</strong></h2>
                                <br />

                                <div id="mydiv" class="form-group" style="display:none">
                                    <div style="visibility: hidden">
                                        <input name="sum" id="total" value="0" />
                                        <input name="mode" value=""/>
                                        <div id="min"></div>
                                    </div>
                                    <div class="col-md-offset-1 col-md-10" id="productList"></div>
                                    <div style="text-align:center" tabindex="1" class="text-danger col-md-offset-1 col-md-10" id="errorTotal"></div>
                                </div>
                                <div class="form-group">
                                    <div style="text-align:center">
                                        <button type="button" class="btn btn-info" data-toggle="modal" data-target="#searchProduct" style="font-size:x-large">Thêm sản phẩm</button>
                                    </div>
                                </div>

                            </div>
                            <h3 class="widget-title" ><strong>THÔNG TIN YÊU CẦU</strong></h3>
                            <div class="widget-content">
                                <div class="form-group">
                                    <label class="control-label col-md-3 col-xs-12">Tiêu đề<span style="color:#ff0000"> *</span></label>
                                    <div class="col-md-9 col-xs-12">
                                        @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control MaxLengthInputTextSmall", @style="float:left;font-size:medium" } })
                                        @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                @*<div class="form-group fallback">
                                    <label class="control-label col-md-3 col-xs-12">Hình ảnh<span style="color:#ff0000"> *</span></label>
                                    <div class="col-md-9 col-xs-12" id="image-dropzone">
                                        <input type="file" id="ImageUrl" name="ImageUrl" accept="image/*" />
                                        @Html.ValidationMessageFor(model => model.ImageUrl, "", new { @class = "text-danger" })
                                        <img id="imgPreview" />

                                    </div>
                                </div>*@
                                
                                <div class="form-group">
                                    @*@Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })*@
                                    <label class="control-label col-md-3 col-xs-12">Địa chỉ nhận hàng<span style="color:#ff0000"> *</span></label>
                                    <div class="col-md-9 col-xs-12" style="margin-top: 6px;">
                                        @Html.EditorFor(model => model.ReceivingAddress, new { htmlAttributes = new { @class = "form-control MaxLengthInputTextSmall", @style = "float:left;font-size:15px" } })
                                        @Html.ValidationMessageFor(model => model.ReceivingAddress, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @*@Html.LabelFor(model => model.TimeRange, htmlAttributes: new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })*@
                                    <label class="control-label col-md-3 col-xs-12">Thời hạn yêu cầu (ngày)<span style="color:#ff0000"> *</span></label>
                                    <div class="col-md-9 col-xs-12">
                                        @Html.EditorFor(model => model.TimeRange, new { htmlAttributes = new { @class = "form-control", onfocus = "if(this.value=='0') this.value=''", @style = "float:left;font-size:medium" } })
                                        @Html.ValidationMessageFor(model => model.TimeRange, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @*@Html.LabelFor(model => model.ReceivingDate, htmlAttributes: new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })*@
                                    <label class="control-label col-md-3 col-xs-12">Ngày nhận hàng<span style="color:#ff0000"> *</span></label>
                                    <div class="col-md-9 col-xs-12">
                                        @Html.EditorFor(model => model.ReceivingDate, new { htmlAttributes = new { @class = "form-control", @style = "float:left;font-size:medium" } })
                                        @Html.ValidationMessageFor(model => model.ReceivingDate, "", new { @class = "text-danger" })
                                        <span tabindex="1" class="text-danger field-validation-valid" id="custome-duedate" style="display:none; padding: 0px;margin-left:-15px;outline: none;"></span>
                                    </div>
                                </div>
                                
             
                                <div class="form-group">
                                    @*@Html.LabelFor(model => model.PaymentType, htmlAttributes: new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })*@
                                    <label class="control-label col-md-3 col-xs-12">Hình thức thanh toán<span style="color:#ff0000"> *</span></label>
                                    <div class="col-md-9 col-xs-12">
                                        @Html.DropDownListFor(
                                        model => model.PaymentType,
                                        new SelectList(Model.AllTypeOfPayments, "Id", "Type"),
                                        "-----[Chọn hình thức thanh toán]-----",
                                        htmlAttributes: new { @class = "form-control", @style = "float:left;font-size:medium" }
                                    )
                                        @Html.ValidationMessageFor(model => model.PaymentType, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                

                                <div class="form-group">
                                    <label class="control-label col-md-3 col-xs-12">Miêu tả chi tiết</label>
                                    <div class="col-md-9">
                                        @Html.TextAreaFor(model => model.Description, new { @class = "form-control", @rows = 5 })
                                    </div>
                                </div>
                            </div>
                            <br />

                            <div style="font-size:17px;">
                                <h2 class="widget-title"><strong>THÔNG TIN LIÊN HỆ</strong></h2>
                                <br />
                                <div class="form-group">
                                    @*@Html.LabelFor(model => model.CustomerName, htmlAttributes: new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })*@
                                    <label class="control-label col-md-3 col-sm-3 col-xs-12">Tên người đăng</label>
                                    <div class="col-md-6 col-sm-6 col-xs-12" style="margin-top: 6px;">
                                        @Html.DisplayFor(model => model.CustomerName, new { htmlAttributes = new { @class = "form-control"} })
                                       
                                    </div>
                                </div>

                                <div class="form-group">
                                    @*@Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })*@
                                    <label class="control-label col-md-3 col-sm-3 col-xs-12">Email</label>
                                    <div class="col-md-6 col-sm-6 col-xs-12" style="margin-top: 6px;">
                                        @Html.DisplayFor(model => model.Email, new { htmlAttributes = new { @class = "form-control"} })
                                        
                                    </div>
                                </div>

                                <div class="form-group">
                                    @*@Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })*@
                                    <label class="control-label col-md-3 col-sm-3 col-xs-12">Điện thoại</label>
                                    <div class="col-md-6 col-sm-6 col-xs-12" style="margin-top: 6px;">
                                        
                                        @Html.FormatPhoneNum(Model.Phone)
                                    </div>
                                </div>

                                <div class="form-group">
                                    @*@Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })*@
                                    <label class="control-label col-md-3 col-sm-3 col-xs-12">Địa chỉ</label>
                                    <div class="col-md-6 col-sm-6 col-xs-12" style="margin-top: 6px;">
                                        @Html.DisplayFor(model => model.Address, new { htmlAttributes = new { @class = "form-control"} })
                                  
                                    </div>
                                </div>
                                <hr />
                                <div class="form-group">
                                    <div style="text-align:center">
                                        <div class="checkbox">
                                            @Html.CheckBoxFor(model => model.Policies)
                                            <label> Tôi đã đọc và đồng ý với các <a href="/Home/Policy">điều khoản và chính sách</a> của BMW </label>
                                            @Html.ValidationMessageFor(model => model.Policies, "", new { @class = "text-danger" , style = "display: block;" })

                                        </div>
                                        <br/>
                                        @*<p><button class="btn btn-success sweet-3" onclick="_gaq.push(['_trackEvent', 'example', 'try', 'sweet-3']);">Hoàn tất</button></p>*@
                                        <p><button class="btn btn-success" type="submit" id="hoantat" style="font-size:x-large">Hoàn tất</button></p>
                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>

            }

        </fieldset>
    </div>
</section>

<div id="modalProduct"></div>


<div id="searchProduct" class="modal fade" role="dialog">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Thêm sản phẩm</h4>
            </div>
            <div class="modal-body" style="min-height:calc(100vh - 210px);max-height: calc(100vh - 210px);overflow-y: auto;">
                <div class="form-horizontal">
                    @*Tìm kiếm sản phẩm*@
                    @using (Ajax.BeginForm(
                        new AjaxOptions
                        {
                            HttpMethod = "GET",
                            InsertionMode = InsertionMode.Replace,
                            UpdateTargetId = "listProduct",
                            OnSuccess = "$('#select').show()"
                        }
                    ))
                    {
                        <p style="text-align:center">
                            @Html.TextBox("searchString", null, new { @class = "form-control text-box", style = "display:inline-block", placeholder = "Nhập vào đây để tìm kiếm" })
                            <input type="submit" value="Tìm kiếm" class="btn btn-primary" style="margin-bottom: 4px;"/>
                        </p>

                        <div id="clone" style="display:none"></div>
                    }

                </div>

                <div id="result">
                    @using (Ajax.BeginForm("SelectProduct", "Request",
                        new AjaxOptions
                        {
                            HttpMethod = "GET",
                            InsertionMode = InsertionMode.Replace,
                            UpdateTargetId = "productList",
                            OnSuccess = "selectedSuccess(data)"
                        }, new { @id = "formAjax" }
                    ))
                    {
                        <div id="listProduct"></div>
                    }
                </div>


            </div>
            <div class="modal-footer">

                <input id="select" type="button" value="Xác nhận" class="btn btn-warning" style="display:none" />

                <button type="button" class="btn btn-default" data-dismiss="modal" id="deleteSearchForm">Hủy</button>
            </div>
        </div>

    </div>
</div>

@*@Scripts.Render("~/bundles/pricejquery")*@
@section Scripts {
    @*@Scripts.Render("~/bundles/jqueryval")*@
    @Scripts.Render("~/bundles/textareasjquery")
    <script>
        $(document).ready(function () {


            var MaxLengthInputTextSmall = @Model.MaxLengthInputTextSmall;
            var MaxLengthInputNumberSmall = @Model.MaxLengthInputNumberSmall;
            var MinNumSeletedProduct = @Model.MinNumSeletedProduct;

            $('input').bind("cut copy paste", function(e) {
                e.preventDefault();
            });

            $("#TimeRange").rules("add", {
                range: [@Model.MinTimeRange, @Model.MaxTimeRange],
                messages: {
                    range: "Thời hạn yêu cầu phải từ @Model.MinTimeRange đến @Model.MaxTimeRange ngày"
                }
            });

            //$("#ImageUrl").rules("add", {
            //    required: true,
            //    accept:"image/jpeg, image/pjpeg",
            //    messages: {
            //        required: "Hình ảnh không được để trống",
            //        accept: "Hình ảnh không hợp lệ"
            //    }
            //});

            $('.MaxLengthInputTextSmall').keypress(function (e) {
                if (this.value.length == MaxLengthInputTextSmall) {
                    e.preventDefault();
                }
            });

            

            $('#hoantat').click(function (e) {
                
                update_amounts();
                var numOfSelectedProduct = $("#my-orders-table > tbody > tr").length;
                console.log("numOfSelectedProduct=" + numOfSelectedProduct);
                if (numOfSelectedProduct < MinNumSeletedProduct) {
                    $('#mydiv').show();
                    message = "<span id='error' class='text-danger field-validation-error'><span>Hãy chọn ít nhất " + MinNumSeletedProduct + " sản phẩm</span></span>";
                    console.log(message);
                    $("#errorTotal").html(message);
                    $('#error').focus();
                } else {
                    var check = true;
                    var receivingDate = $("#ReceivingDate").val();

                    var d = new Date(receivingDate);
                    var current = new Date();
                    var currentYear = current.getFullYear();
                    var year = d.getFullYear();
                    var MaxYearInput = @Model.MaxYearInput;

                    if (year > (currentYear + MaxYearInput)) {
                        var message = "Ngày giao hàng không được vượt quá năm " + (currentYear + MaxYearInput);
                        var oldMessage =  $("span[for='ReceivingDate']").text();
                        console.log(oldMessage);
                        $("span[for='ReceivingDate']").empty();
                     
                        console.log(message);
                        $('#custome-duedate').html(message);
                        $('#custome-duedate').show();
                        check = false;
                       
                    } 

                    var result = $('#form0').valid();
                    if (!result) {
                        return;
                    }
                    console.log(result);
                    console.log("check=" + check);
                    if (result && check) {
                        console.log("Hello 123");
                        window.addEventListener("submit", function (e) {
                            var form = e.target;
                            if (form.getAttribute("enctype") === "multipart/form-data") {
                                console.log("Hello Ok");

                                if (form.dataset.ajax) {
                                    e.preventDefault();
                                    e.stopImmediatePropagation();
                                    var xhr = new XMLHttpRequest();
                                    xhr.open(form.method, form.action);
                                    xhr.onreadystatechange = function () {
                                        if (xhr.readyState == 4 && xhr.status == 200) {
                                            console.log(xhr.responseText);
                                            //if (form.dataset.ajaxUpdate) {
                                            //    var updateTarget = document.querySelector(form.dataset.ajaxUpdate);
                                            //    if (updateTarget) {
                                            //        updateTarget.innerHTML = xhr.responseText;
                                            //    } 
                                            //}
                                            checkValidate(xhr.responseText);
                                        }
                                    };
                                    xhr.send(new FormData(form));
                                }
                            }
                        }, true);
                    } else {
                        console.log("error");
                        e.preventDefault();
                        $('#custome-duedate').focus();
                        return;
                    }
                    

                   
                }
                
            });

            $('input[type="number"]').bind('keypress', function (e) {
                if (e.keyCode == '9' || e.keyCode == '16') {
                    return;
                }
                var code;
                if (e.keyCode) code = e.keyCode;
                else if (e.which) code = e.which;
                if (e.which == 46)
                    return false;
                if (code == 8 || code == 46)
                    return true;
                if (code < 48 || code > 57)
                    return false;
            });

            var MinDateDeliveryRange = @Model.MinDateDeliveryRange;
            var now = moment().format('YYYY-MM-DD');
            
            var minDate = moment(now).add(MinDateDeliveryRange, 'days').format('YYYY-MM-DD');

            $.validator.addMethod("daterange", function (value, element) {
                var receivingDate = $("#ReceivingDate").val();
                var d = new Date(receivingDate);
                var current = new Date();
                var currentYear = current.getFullYear();
                var year = d.getFullYear();
                var MaxYearInput = @Model.MaxYearInput;

                if (year > (currentYear + MaxYearInput)) { return true; }

                var timeRange = $("#TimeRange").val();
                if (timeRange > MinDateDeliveryRange) {
                    minDate = moment(now).add(timeRange, 'days').format('YYYY-MM-DD'); 
                } 

                console.log("now:" + now + ", receivingDate:" + receivingDate + ", minDate:" + minDate);

                return (receivingDate >= minDate);

            }, function(value, element) {
                return "Ngày nhận hàng phải từ ngày " + moment(minDate).format('DD/MM/YYYY') + " về sau";
            });

            

            $('input[name="ReceivingDate"]').rules("add", {
                daterange: true
            });

            $("#ReceivingDate").on("change", function() {
                var receivingDate = $("#ReceivingDate").val();

                var d = new Date(receivingDate);
                var current = new Date();
                var currentYear = current.getFullYear();
                var year = d.getFullYear();
                var MaxYearInput = @Model.MaxYearInput;

                if (year > (currentYear + MaxYearInput)) {
                    var message = "Ngày giao hàng không được vượt quá năm " + (currentYear + MaxYearInput);
                    console.log(message);
                    var oldMessage =  $("span[for='ReceivingDate']").text();
                    console.log("old:" + oldMessage);

                    $("span[for='ReceivingDate']").empty();

                    $('#custome-duedate').html(message);
                    $('#custome-duedate').show();
                } else {
                    $('#custome-duedate').empty();
                    $('#custome-duedate').hide();
                }

            });

            $("#Policies").rules("add", {
                required: true,
                messages: {
                    required: "Vui lòng đọc và đồng ý với các điều khoản của BMW"
                }
            });
            function update_amounts() {
                var sum = 0.0;
                var min = @Model.MinBidPrice;  //set config

                $('#my-orders-table > tbody  > tr').each(function () {
                    var qty = $(this).find('.qty').val();

                    var price = $(this).find('.price').text();

                    var price2 = Number(price.replace(/[^0-9]+/g, ""));

                    console.log("qty:" + qty + ", price:" + price + ", price2:" + price2);

                    var amount = (qty * price2)
                    sum += amount;
                });
                console.log(sum);

                if (min != 0 && $('#Flag').val() == "bid") {
                    if (sum >= min) {
                        $('#errorTotal').empty();
                    } else {
                        var message = "Total > " + addDot(min) + " &#x20AB;)";
                        var message = "Giá thầu phải lớn hơn " + addDot(min) + " &#x20AB; (Giá hiện tại: " + addDot(sum) + " &#x20AB;)"
                        console.log(message);
                        $('#errorTotal').html(message);
                    }
                }

                $('#total').val(sum);
            }
        });

        $("#Description").summernote({
            height: 300, // set editor height
            width: 700,
            minHeight: null, // set minimum height of editor
            maxHeight: null, // set maximum height of editor
            focus: false, // set focus to editable area after initializing summernote
            lang: "vi-VN",
            callbacks: {
                onKeydown: function (e) { 
                    var t = e.currentTarget.innerText; 
                    console.log(t);
                    if (t.trim().length >= 400) {
                        //delete key
                        if (e.keyCode != 8)
                            e.preventDefault(); 
                    } 
                },
                onKeyup: function (e) {
                    var t = e.currentTarget.innerText;
                    $('#maxContentPost').text(400 - t.trim().length);
                },
                onPaste: function (e) {
                    var t = e.currentTarget.innerText;
                    var bufferText = ((e.originalEvent || e).clipboardData || window.clipboardData).getData('Text');
                    e.preventDefault();
                    var all = t + bufferText;
                    document.execCommand('insertText', false, all.trim().substring(0, 400));
                    $('#maxContentPost').text(400 - t.length);
                }
            }
        });



        //function readURL(input) {
        //    if (input.files && input.files[0]) {
        //        var reader = new FileReader();

        //        reader.onload = function (e) {
        //            $('#imgPreview').attr('src', e.target.result);
        //        }

        //        reader.readAsDataURL(input.files[0]);
        //    }
        //}

        //$("#ImageUrl").change(function(){
        //    readURL(this);
        //});

        
    </script>
}


