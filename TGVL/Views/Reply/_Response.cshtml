@model TGVL.Models.ReplyViewModel

@using (Ajax.BeginForm(
    new AjaxOptions
    {
        HttpMethod = "POST",
        InsertionMode = InsertionMode.Replace,
        UpdateTargetId = "",
        OnSuccess = "updateReplies"
    }
))
{
    @Html.AntiForgeryToken()

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="popular-posts widget widget__sidebar">
        <h3 class="widget-title"><strong>THÔNG TIN</strong></h3>
        <div class="widget-content">
            <div class="form-horizontal">
                @if (Model.Flag == 1) //bid
                {
                    var bidPrice = string.Format("{0:C0}", Model.BidPrice);
 
                    <div class="form-group">
                        <label class="control-label col-md-3" style="font-size:14px">Giá thầu (&#x20AB;) <span style="color:#ff0000"> *</span></label>
                        <div class="col-md-9">
                            @*@Html.EditorFor(model => model.Total, "", new { htmlAttributes = new { @class = "form-control" } })*@
                            @Html.EditorFor(model => model.BidPrice, "", new { htmlAttributes = new { @class = "form-control" , @Value= bidPrice } })
                            @Html.ValidationMessageFor(model => model.BidPrice, "", new { @class = "text-danger" })
                        </div> 
                    </div>

                    <div class="form-group">
                        <label class="control-label col-md-3" style="font-size:14px">Giá đề xuất từ cửa hàng</label>
                        <div class="col-md-9">
                            <span class="total"></span> &#x20AB;
                            <div style="display:none">@Html.HiddenFor(model => model.Total, new { htmlAttributes = new { @class = "total2" } })</div>
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="control-label col-md-3" style="font-size:14px">Ngày giao hàng<span style="color:#ff0000"> *</span></label>

                        <div class="col-md-9">
                            @Html.EditorFor(model => model.DeliveryDate, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.DeliveryDate, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="control-label col-md-3" style="font-size:14px">Ghi chú</label>

                        <div class="col-md-9">
                            
                            @Html.TextAreaFor(model => model.Description, new { @class = "form-control", @rows = "5", @cols = "20" })
                        </div>
                    </div>
                }

                else
                {
                    @Html.HiddenFor(model => model.BidPrice, new { htmlAttributes = new { @Value= "0" } })
                    <div class="form-group">
                        <label class="control-label col-md-3" style="font-size:14px">Giá đề xuất từ cửa hàng</label>
                        <div class="col-md-9">
                            <span class="total"></span> &#x20AB;
                            <div style="display:none">@Html.HiddenFor(model => model.Total, new { htmlAttributes = new { @class = "total2" } })</div>
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="control-label col-md-3" style="font-size:14px">Ngày giao hàng<span style="color:#ff0000"> *</span></label>
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.DeliveryDate, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.DeliveryDate, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="control-label col-md-3" style="font-size:14px">Giảm giá (%)</label>
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.Discount, new { htmlAttributes = new { @class = "discount form-control", onfocus = "if(this.value=='0') this.value=''" } })
                            @Html.ValidationMessageFor(model => model.Discount, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group" style="display:none">
                        <label class="control-label col-md-3" style="font-size:14px">Chi phí vận chuyển <span style="color:#ff0000"> *</span></label>
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.ShippingFee, new { htmlAttributes = new { @class = "fee form-control" } })
                            @Html.ValidationMessageFor(model => model.ShippingFee, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="control-label col-md-3" style="font-size:14px">Ghi chú</label>

                        <div class="col-md-9">
                            @Html.TextAreaFor(model => model.Description, new { @class = "form-control", @rows = "5", @cols = "20" } )
                            
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
    <br />
    <div class="table-responsive">
        @if (Model.Flag == 0)
        {
            <table class="data-table" id="myTable">
                <thead>
                    <tr>
                        <th colspan="1">
                            Sản phẩm phản hồi: <span class="badge">@Model.ReplyProductsTest.Count()</span>
                        </th>

                        <th colspan="1">
                            Hình ảnh
                        </th>
                        <th colspan="1">
                            Đơn giá
                        </th>
                        <th colspan="1">
                            Số lượng
                        </th>
                        <th colspan="1">
                            Thành tiền
                        </th>
                    </tr>
                </thead>
                <tfoot style="display:none">
                    <tr>
                        <th colspan="5">TỔNG CỘNG</th>
                        <th colspan="6">
                            <span class="total" style="font-size:18px"></span> &#x20AB;
                            <div style="display:none">@Html.EditorFor(model => model.Total, new { htmlAttributes = new { @class = "total2" } })</div>
                        </th>
                    </tr>
                </tfoot>
                <tbody>

                    @for (int i = 0; i < Model.ReplyProductsTest.Count(); i++)
                    {

                        <tr>
                            <td style="display:none">
                                @Html.EditorFor(model => Model.ReplyProductsTest[i].Product.Id)
                                @Html.EditorFor(model => Model.ReplyProductsTest[i].Product.UnitPrice)
                            </td>
                            <td>@Html.DisplayFor(model => Model.ReplyProductsTest[i].Product.Name)</td>
                            <td><img src="~/Images/Product/Warehouse/@Model.ReplyProductsTest[i].Product.Image" style="max-height:100px; max-width:100px" /></td>
                            <td class="price">
                                @Html.DisplayFor(model => Model.ReplyProductsTest[i].Product.UnitPrice) / @Html.DisplayFor(model => Model.ReplyProductsTest[i].Product.Type)
                            </td>
                            <td>
                                <div class="qtyBid">@Html.DisplayFor(model => Model.ReplyProductsTest[i].Quantity)</div>
                                @Html.HiddenFor(model => Model.ReplyProductsTest[i].Quantity)
                            </td>
                            <td>
                                @{var mini = Model.ReplyProductsTest[i].Product.UnitPrice * Model.ReplyProductsTest[i].Quantity;}
                                @string.Format("{0:C0}", mini)
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
                        }
                        else
                        {
                            <table class="data-table" id="myTable" style="display:none">
                                <thead>
                                    <tr>
                                        <th colspan="1">
                                            Số thứ tự
                                        </th>
                                        <th colspan="1">
                                            Sản phẩm
                                        </th>
                                        <th colspan="1">
                                            Hình ảnh
                                        </th>
                                        <th colspan="1">
                                            Đơn giá
                                        </th>
                                        <th colspan="1">
                                            Đơn vị tính
                                        </th>
                                        <th colspan="1">
                                            Số lượng
                                        </th>
                                    </tr>
                                </thead>
                                <tfoot style="display:none">
                                    <tr>
                                        <th colspan="5">TỔNG CỘNG</th>
                                        <th colspan="6">
                                            <span class="total" style="font-size:18px"></span> &#x20AB;
                                            <div style="display:none">@Html.EditorFor(model => model.Total, new { htmlAttributes = new { @class = "total2" } })</div>
                                        </th>
                                    </tr>
                                </tfoot>
                                <tbody>
                                    @{
                                        int count2 = 0;
                                    }

                                    @for (int i = 0; i < Model.ReplyProductsTest.Count(); i++)
                                    {
                                        count2++;
                                        <tr>
                                            <td>@count2</td>
                                            <td style="display:none">
                                                @Html.EditorFor(model => Model.ReplyProductsTest[i].Product.Id)
                                                @Html.EditorFor(model => Model.ReplyProductsTest[i].Product.UnitPrice)
                                            </td>
                                            <td>@Html.DisplayFor(model => Model.ReplyProductsTest[i].Product.Name)</td>
                                            <td></td>
                                            <td class="price">
                                                @Html.DisplayFor(model => Model.ReplyProductsTest[i].Product.UnitPrice)
                                            </td>
                                            <td>@Html.DisplayFor(model => Model.ReplyProductsTest[i].Product.Type)</td>
                                            <td>
                                                <div class="qtyBid">@Html.DisplayFor(model => Model.ReplyProductsTest[i].Quantity)</div>
                                                @Html.HiddenFor(model => Model.ReplyProductsTest[i].Quantity)
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                                        }
    </div>
                                        }



<script>


    $(document).ready(function () {
        update_amounts();      

        $('#BidPrice').keyup(function(event) {
            if(event.which >= 37 && event.which <= 40) return;

            $(this).val(function(index, value) {
                return value
                .replace(/\D/g, "")
                .replace(/\B(?=(\d{3})+(?!\d))/g, ".")
                ;
            });
        });


        $("#Discount").on("keypress keyup blur", function (event) {    
            $(this).val($(this).val().replace(/[^\d].+/, ""));
            if ((event.which < 48 || event.which > 57)) {
                event.preventDefault();
            }
        });

        $('.qty').on('input', function () {
            update_amounts();
        });
        $('.fee').on('input', function () {
            $(this).text($(this).text().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,"));
            update_amounts();
        });
        $('.discount').on('input', function () {
            update_amounts();
        });

        var MinDateDeliveryRange = @Model.MinDateDeliveryRange;
        var now = moment().format('YYYY-MM-DD');
        var minDate = moment(now).add(MinDateDeliveryRange, 'days').format('YYYY-MM-DD');

        $.validator.addMethod("daterange", function (value, element) {
            var deliveryDate = $("#DeliveryDate").val();
            console.log("now:" + now + ", DeliveryDate:" + deliveryDate + ", minDate:" +minDate);
            
            return deliveryDate >= minDate;

        }, "Ngày giao hàng phải từ ngày " + moment(minDate).format('DD/MM/YYYY') + " về sau");

        $.validator.unobtrusive.adapters.addBool("daterange");

        $("#submit-btn-reply").click(function (event) {
            console.log("Hello from response");

            event.preventDefault();
            var result = $('#form0').valid();
            console.log(result);
            if (result) {
                $("form[id='form0']").submit();

                $('#replyModal').modal('toggle');
                $("#replyInfo").empty();
                $('#submit-btn-reply').remove();
            }

        });
    });

    $('input[type="number"]').bind('keypress', function (e) {
        if (e.keyCode == '9' || e.keyCode == '16') {
            return;
        }
        var code;
        if (e.keyCode) code = e.keyCode;
        else if (e.which) code = e.which;
        if (e.which == 46)
            return false;
        if (code == 8 || code == 46)
            return true;
        if (code < 48 || code > 57)
            return false;
    });

    function update_amounts() {
        var sum = 0.0;
        $('#myTable > tbody  > tr').each(function () {
            var qty = $(this).find('.qty').val();
            if (qty == null) {
                qty = $(this).find('.qtyBid').text();
            }
            var price = $(this).find('.price').text();
            var price2 = Number(price.replace(/[^0-9]+/g, ""));

            console.log("qty:" + qty + ", price:" + price + ", price2:" + price2);

            var amount = (qty * price2)
            sum += amount;
        });

        var fee = parseInt($(".fee").val()) || 0;
        var discount = parseInt($(".discount").val()) || 0;
        var dec = (discount / 100).toFixed(2);

        var total = (sum + fee) - ((sum + fee) * dec);
        total = Math.round(total);
        console.log(total);
        //sum = (sum + fee) * discount / 100;


        var sumCur = addDot(total);
        console.log(sumCur);

        $('.total').text(sumCur);
        $('.total2').val(total);

    }


</script>

