@model TGVL.Models.ReplyDetails

@using (Ajax.BeginForm(
    "Edit",
    "Reply",
                new AjaxOptions
                {
                    HttpMethod = "POST",
                    InsertionMode = InsertionMode.Replace,
                    UpdateTargetId = "",
                    OnSuccess = "updateExistReplies(data, status, xhr)"
                }
            ))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.Id)
    <div class="table-responsive">
        <table class="data-table" id="myTable">
            <thead>
                <tr>
                    <th>
                        Số thứ tự
                    </th>
                    <th>
                        Sản phẩm
                    </th>

                    <th>
                        Hình ảnh
                    </th>

                    <th>
                        Đơn giá
                    </th>

                    <th>
                        Đơn vị tính
                    </th>

                    <th>
                        Số lượng
                    </th>
                </tr>
            </thead>
            <tbody>
                @{
                    int count = 0;
                }

                @for (int i = 0; i < Model.ReplyProducts.Count(); i++)
                {
                    
                    count++;
                    <tr>
                        <td>
                            @count
                            @Html.HiddenFor(model => Model.ReplyProducts[i].ReplyProductId)
                        </td>
                        <td style="display:none">
                            @Html.EditorFor(model => Model.ReplyProducts[i].Id)
                            @Html.EditorFor(model => Model.ReplyProducts[i].UnitPrice)
                        </td>
                        <td>@Html.DisplayFor(model => Model.ReplyProducts[i].Name)</td>
                        <td><img src="~/Images/Product/Warehouse/@Model.ReplyProducts[i].Image" style="max-height:100px; max-width:100px" /></td>
                        <td class="price">
                            @Html.DisplayFor(model => Model.ReplyProducts[i].UnitPrice)
                        </td>
                        <td>@Html.DisplayFor(model => Model.ReplyProducts[i].Type)</td>
                        <td>
                            @if (Model.Flag == 1)
                            {
                                //bid, k thể edit quantity
                                <div class="qtyBid">@Html.DisplayFor(model => Model.ReplyProducts[i].Quantity)</div>
                                @Html.HiddenFor(model => Model.ReplyProducts[i].Quantity)
                            }
                            else
                            {
                                //normal
                                @Html.EditorFor(model => Model.ReplyProducts[i].Quantity, new { htmlAttributes = new { @class = "qty form-control" } })
                                @Html.ValidationMessageFor(model => Model.ReplyProducts[i].Quantity, "", new { @class = "text-danger" })
                            } 
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <br />

    <div class="popular-posts widget widget__sidebar">
        <h3 class="widget-title"><strong>THÔNG TIN THÊM</strong></h3>
        <div class="widget-content">
            <div class="form-horizontal">

                <div class="form-group">
                    <labael class="control-label col-md-3">Shipping Fee</labael>
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.ShippingFee, new { htmlAttributes = new { @class = "fee form-control" } })
                        @Html.ValidationMessageFor(model => model.ShippingFee, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <labael class="control-label col-md-3">Discount</labael>
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.Discount, new { htmlAttributes = new { @class = "discount form-control" } })
                        @Html.ValidationMessageFor(model => model.Discount, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <labael class="control-label col-md-3 col-sm-3 col-xs-12">Tổng cộng</labael>
                    @*@Html.LabelFor(model => model.Total, htmlAttributes: new { @class = "control-label col-md-3" })*@
                    <div class="col-md-9">
                        <span class="total"></span> &#x20AB;
                        <div id="errorTotal" class="text-danger"></div>
                        <div id="oldTotal" style="display:none"></div>
                        
                        <div style="visibility: hidden">
                            @Html.EditorFor(model => model.Total, new { htmlAttributes = new { @class = "total2" } })
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <labael class="control-label col-md-3">Ngày giao hàng</labael>
                    @*@Html.LabelFor(model => model.DeliveryDate, htmlAttributes: new { @class = "control-label col-md-3" })*@
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.DeliveryDate, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.DeliveryDate, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <labael class="control-label col-md-3">Mô tả</labael>
                    @*@Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-3" })*@
                    <div class="col-md-9">
                        @Html.TextAreaFor(model => model.Description, new { htmlAttributes = new { @class = "form-control", @row = "5", @column = "5" } })
                    </div>
                </div>

            </div>
        </div>
    </div>


}

<script>


    $(document).ready(function () {
        
        update_amounts();
        
        $('.qty').on('input', function () {
            update_amounts();
        });
        $('.fee').on('input', function () {
            $(this).text($(this).text().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,"));
            update_amounts();
        });
        $('.discount').on('input', function () {
            update_amounts();
        });
        $.validator.addMethod("daterange", function (value, element) {
            var deliveryDate = $("#DeliveryDate").val();

            var now = moment().format('YYYY-MM-DD');

            return deliveryDate >= now;

            //return someDate >= today;
        }, "Delivery date must be on or after today");

        $.validator.unobtrusive.adapters.addBool("daterange");

        $("#submit-btn-edit").click(function (event) {
            event.preventDefault();
            console.log("Hello from edit");
            var result = $('#form0').valid();
            console.log(result);
            if (result) {
                $("form[id='form0']").submit();
            }

        });

        $('input[type="number"]').bind('keypress', function (e) {
            if (e.keyCode == '9' || e.keyCode == '16') {
                return;
            }
            var code;
            if (e.keyCode) code = e.keyCode;
            else if (e.which) code = e.which;
            if (e.which == 46)
                return false;
            if (code == 8 || code == 46)
                return true;
            if (code < 48 || code > 57)
                return false;
        });
    });

    

    function update_amounts() {
        var sum = 0.0;
        var oldTotal = $('#oldTotal').text();
        console.log("oldTotal:" + oldTotal);

        $('#myTable > tbody  > tr').each(function () {
            var qty = $(this).find('.qty').val();
            if (qty == null) {
                qty = $(this).find('.qtyBid').text();
            }
            var price = $(this).find('.price').text();
            var price2 = Number(price.replace(/[^0-9]+/g, ""));

            //console.log("qty:" + qty + ", price:" + price + ", price2:" + price2);

            var amount = (qty * price2)
            sum += amount;
        });

        var fee = parseInt($(".fee").val()) || 0;
        var discount = parseInt($(".discount").val()) || 0;
        var dec = (discount / 100).toFixed(2);

        var total = (sum + fee) - ((sum + fee) * dec);
        if (oldTotal != 0) {
            if (total <= oldTotal) {
                $('#errorTotal').empty();
            } else {
                var message = "Giá bid mới phải bằng hoặc nhỏ hơn giá cũ (" + addDot(oldTotal) + " &#x20AB;)";
                $('#errorTotal').html(message);
            }
            
        }
        total = Math.round(total);

        //console.log(total);
        
        var sumCur = addDot(total);
        //console.log(sumCur);

        $('.total').text(sumCur);
        $('.total2').val(total);

    }


</script>