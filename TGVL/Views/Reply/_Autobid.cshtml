<style>
    .text-danger {
        color: #ed1c24;
        padding: 0px;
        font-size: 15px;
    }
    .modal-body {
        min-height: 0;
    }
    .current-price {
        font-size: 25px;
        color:red;
    }
</style>

@model TGVL.Models.AutobidViewModel

@using (Ajax.BeginForm(
    "SetAutoBid",
    "Reply",
    new AjaxOptions
    {
        HttpMethod = "POST",
        OnSuccess = "updateExistRepliesAutoBid(data, status, xhr)"
    }
))
{
    var MinimumPrice = string.Format("{0:C0}", Model.MinimumPrice);
    var Deduction = string.Format("{0:C0}", Model.Deduction);

    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.ReplyId)
    @Html.HiddenFor(model => model.Type)
    <div class="popular-posts widget widget__sidebar">
        <h3 class="widget-title"><strong>THÔNG TIN</strong></h3>
        <div class="widget-content">
            <div class="form-horizontal">
                <div class="form-group">
                    <label class="control-label col-md-3" style="font-size:14px">Giá thầu hiện tại</label>
                    <div class="col-md-9">
                        <span class="current-price">@Html.DisplayFor(model => model.CurentPrice)</span>
                    </div>
                </div>

                <div class="form-group">
                    <label class="control-label col-md-3" style="font-size:14px">Giá thầu tối thiểu (&#x20AB;) <span style="color:#ff0000"> *</span></label>
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.MinimumPrice, "", new { htmlAttributes = new { @class = "form-control", onfocus = "if(this.value=='0') this.value=''", @Value = MinimumPrice, @style = "font-size:medium" } })
                        @Html.ValidationMessageFor(model => model.MinimumPrice, "", new { @class = "text-danger" })
                        <span class="text-danger field-validation-valid" id="errorTotal1" style="display:none"></span>
                    </div>
                </div>

                <div class="form-group">
                    <label class="control-label col-md-3" style="font-size:14px">Giá trừ mỗi lần giảm (&#x20AB;) <span style="color:#ff0000"> *</span></label>
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.Deduction, "", new { htmlAttributes = new { @class = "form-control", onfocus = "if(this.value=='0') this.value=''", @Value = Deduction, @style = "font-size:medium" } })
                        @Html.ValidationMessageFor(model => model.Deduction, "", new { @class = "text-danger" })
                        <span class="text-danger field-validation-valid" id="errorTotal2" style="display:none"></span>
                    </div>
                </div>
            </div>
        </div>
       
    </div>
}

<script>
    $(document).ready(function () {
        
        var type = "@Model.Type";
        var MinDeduction = @ViewBag.MinDeduction;
       

        if (type == "new") {
            $('#submit-btn-remove-autobid').hide();
            $('#close-reply-form-auto').show();
            $('submit-btn-autobid').val('Hoàn tất');
        } else {
            $('#submit-btn-remove-autobid').show();
            $('#close-reply-form-auto').hide();
            $('submit-btn-autobid').val('Cập nhật');
        }
        var currentPrice = "@Model.CurentPrice";

        $('#MinimumPrice').keyup(function (event) {
            if (event.which >= 37 && event.which <= 40) return;

            var rawMin = $(this).val();
            if (rawMin == "") {
                var message = "Giá thầu tối thiểu không được để trống";
                console.log(message);
                $('#errorTotal1').html(message);
                $('#errorTotal1').show();
                return;
            }

            var min = Number($(this).val().replace(/[^0-9]+/g, ""));
            var test = Number(currentPrice.replace(/[^0-9]+/g, ""));

            console.log("min=" + min + ", test=" + test);

            if (min >= test) {
                var message = "Giá thầu tối thiểu phải nhỏ hơn giá thầu hiện tại (@Model.CurentPrice)";
                console.log(message);
                $('#errorTotal1').html(message);
                $('#errorTotal1').show();
            } else if (min == 0) {
                var message = "Giá thầu tối thiểu phải lớn hơn 0 &#x20AB;";
                console.log(message);
                $('#errorTotal1').html(message);
                $('#errorTotal1').show();
            }
            else {
                $('#errorTotal1').empty();
                $('#errorTotal1').hide();
            }

            $(this).val(function (index, value) {
                return value
                .replace(/\D/g, "")
                .replace(/\B(?=(\d{3})+(?!\d))/g, ".")
                ;
            });
        });

        $('#Deduction').keyup(function (event) {
            if (event.which >= 37 && event.which <= 40) return;
            var rawDeduction = $(this).val();
            if (rawDeduction == "") {
                var message = "Giá trừ không được để trống";
                console.log(message);
                $('#errorTotal2').html(message);
                $('#errorTotal2').show();
                return;
            }

            var deduction = Number($(this).val().replace(/[^0-9]+/g, ""));
            var rawmin = $('#MinimumPrice').val() == "" ? "0" : $('#MinimumPrice').val();
   
            var min = Number($('#MinimumPrice').val().replace(/[^0-9]+/g, ""));

            console.log("rawmin= "+ rawmin +", min=" + min + ", deduction=" + deduction);

            if (deduction >= min) {
                var message = "Giá trừ phải nhỏ hơn giá thầu tối thiểu (" + rawmin + " &#x20AB;)";
                console.log(message);
                $('#errorTotal2').html(message);
                $('#errorTotal2').show();
            } else if (deduction < MinDeduction) {
                var message = "Giá trừ phải lớn hơn hoặc bằng " + addDot(MinDeduction.toString()) + " &#x20AB;";
                console.log(message);
                $('#errorTotal2').html(message);
                $('#errorTotal2').show();
            }
            else {
                $('#errorTotal2').empty();
                $('#errorTotal2').hide();
            }

            $(this).val(function (index, value) {
                return value
                .replace(/\D/g, "")
                .replace(/\B(?=(\d{3})+(?!\d))/g, ".")
                ;
            });
        });

        $("#submit-btn-remove-autobid").click(function (event) {
            event.preventDefault();

            console.log("remove autobid");
            $('#replyModal').modal('toggle');
            swal({
                title: "Bạn có chắc chắn muốn hủy chế độ tự động đặt thầu?",
                type: "warning",
                showCancelButton: true,
                confirmButtonText: "ĐỒNG Ý",
                cancelButtonText: 'HỦY',
                confirmButtonColor: '#d33'
            }).then(function () {
                var options = {
                    url: '/Reply/RemoveAutoBid',
                    type: 'GET',
                    data: { replyId: @Model.ReplyId }
                };

                $.ajax(options).done(function (data) {
                    if (data.Success == "Success") {
                        $("#submit-btn-remove-autobid").off().on('click', function() {
                            console.log("Solved");
                        });

                        $('#autoBidModal').modal({
                            backdrop: true,
                            keyboard: true
                        });

                        $('#autoBidModal').modal('toggle');

                        swal("Hoàn tất", "Hủy tự động đặt thầu thành công", "success");
                    } else {
                        swal("Lỗi", data.Message, "error");
                    }
            
                });
            })   
        });

        $("#submit-btn-autobid").click(function (event) {
            event.preventDefault();
            console.log("Hello from auto bid");
            var test = Number(currentPrice.replace(/[^0-9]+/g, ""));

            var rawMin = $('#MinimumPrice').val();
            if (rawMin == "") {
                var message = "Giá thầu tối thiểu không được để trống";
                $('#errorTotal1').html(message);
                $('#errorTotal1').show();
                return;
            }
            var min = Number($('#MinimumPrice').val().replace(/[^0-9]+/g, ""));
            if (min == 0) {
                var message = "Giá thầu tối thiểu phải lớn hơn 0 &#x20AB;";
                $('#errorTotal1').html(message);
                $('#errorTotal1').show();
                return;
            }
            if (min >= test) {
                var message = "Giá thầu tối thiểu phải nhỏ hơn giá thầu hiện tại (@Model.CurentPrice)";
                console.log(message);
                $('#errorTotal1').html(message);
                $('#errorTotal1').show();
                return;
            }


            var rawDeduction = $('#Deduction').val();
            if (rawDeduction == "") {
                var message = "Giá trừ không được để trống";
                $('#errorTotal2').html(message);
                $('#errorTotal2').show();
                return;
            }
            var deduction = Number($('#Deduction').val().replace(/[^0-9]+/g, ""));
            if (deduction < MinDeduction) {
                var message = "Giá trừ phải lớn hơn hoặc bằng " + addDot(MinDeduction.toString()) + " &#x20AB;";
                $('#errorTotal2').html(message);
                $('#errorTotal2').show();
                return;
            }
            if (deduction >= min) {
                var message = "Giá trừ phải nhỏ hơn giá thầu tối thiểu (" + rawMin + " &#x20AB;)";
                console.log(message);
                $('#errorTotal2').html(message);
                $('#errorTotal2').show();
                return;
            }
            $("#submit-btn-autobid").off().on('click', function() {
                console.log("Solved");
            });
            $("form[id='form0']").submit();

        });
    });


</script>